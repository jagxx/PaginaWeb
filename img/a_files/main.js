// Generated by LiveScript 1.3.0
(function(){
  var module, x$;
  module = {};
  (function(module){
    var d3Color, ret;
    if (typeof require != 'undefined' && require !== null) {
      d3Color = require('d3-color');
    }
    ret = {
      name: 'DNA',
      desc: "double helix structure of DNA for your high-tech project",
      tags: ['dna', 'biology', 'rna', 'biohazard', 'spiral', 'helix', 'spin', 'ball'],
      slug: "dna-spin-spiral-preloader",
      init: function(){},
      usepal: function(config, pal){},
      config: {
        'speed': 2,
        'background': 'rgba(255,255,255,0%)',
        'size': 200,
        'count': 10,
        'radius': 3,
        'height': 36,
        'c1': '#f92',
        'c2': '#c60',
        'c3': '#29f',
        'c4': '#06c'
      },
      id: 'dna',
      support: {
        svg: true
      },
      license: 'RF',
      settings: {
        pal: ["DNA", ['#941946', '#fbacc9', '#a2f0fb', '#164ba3']]
      },
      edit: {
        count: {
          name: "Count",
          type: 'number',
          'default': 10
        },
        radius: {
          name: "Radius",
          type: 'number',
          'default': 3
        },
        height: {
          name: "Height",
          type: 'number',
          'default': 36
        },
        c1: {
          name: "Color 1",
          type: 'color',
          'default': '#f92'
        },
        c2: {
          name: "Color 2",
          type: 'color',
          'default': '#c60'
        },
        c3: {
          name: "Color 3",
          type: 'color',
          'default': '#29f'
        },
        c4: {
          name: "Color 4",
          type: 'color',
          'default': '#06c'
        },
        speed: {
          'default': 2
        }
      },
      watch: function(n, o){
        return n;
      },
      dom: function(config){
        var svg, r, r1, r2, c, speed, size, height, gap, cy1, cy2, ref$, c1, c2, c3, c4, i$, i, cx, cy;
        svg = [];
        r = +config.radius || 5;
        r1 = r * 0.8;
        r2 = r * 1.2;
        c = +config.count || 6;
        speed = +config.speed;
        size = 100;
        height = +config.height;
        gap = size / (3 * c + 1);
        cy1 = (size - height) * 0.5;
        cy2 = (size + height) * 0.5;
        ref$ = {
          c1: config.c1,
          c2: config.c2,
          c3: config.c3,
          c4: config.c4
        }, c1 = ref$.c1, c2 = ref$.c2, c3 = ref$.c3, c4 = ref$.c4;
        for (i$ = 0; i$ < c; ++i$) {
          i = i$;
          cx = 3 * gap * i + 2 * gap;
          cy = size / 2;
          svg.push("<circle cx=\"" + cx + "\" cy=\"" + cy + "\" r=\"" + r + "\">\n  <animate attributeName=\"r\" times=\"0;0.5;1\" values=\"" + r1 + ";" + r2 + ";" + r1 + "\" dur=\"" + speed + "s\"\n  repeatCount=\"indefinite\" begin=\"" + -speed * (0.25 + i / c) + "s\"/>\n  <animate attributeName=\"cy\" keyTimes=\"0;0.5;1\" values=\"" + cy1 + ";" + cy2 + ";" + cy1 + "\" dur=\"" + speed + "s\"\n  repeatCount=\"indefinite\" begin=\"" + -speed * (i / c) + "s\" keySplines=\"0.5 0 0.5 1;0.5 0 0.5 1\" calcMode=\"spline\"/>\n  <animate attributeName=\"fill\" keyTimes=\"0;0.5;1\" values=\"" + c1 + ";" + c2 + ";" + c1 + "\" dur=\"" + speed + "s\"\n  repeatCount=\"indefinite\" begin=\"" + -speed * (0.25 + i / c) + "s\"/>\n</circle>");
          svg.push("<circle cx=\"" + cx + "\" cy=\"" + cy + "\" r=\"" + r + "\">\n  <animate attributeName=\"r\" times=\"0;0.5;1\" values=\"" + r1 + ";" + r2 + ";" + r1 + "\" dur=\"" + speed + "s\"\n  repeatCount=\"indefinite\" begin=\"" + -speed * (0.75 + i / c) + "s\"/>\n  <animate attributeName=\"cy\" keyTimes=\"0;0.5;1\" values=\"" + cy1 + ";" + cy2 + ";" + cy1 + "\" dur=\"" + speed + "s\"\n  repeatCount=\"indefinite\" begin=\"" + -speed * (0.5 + i / c) + "s\" keySplines=\"0.5 0 0.5 1;0.5 0 0.5 1\" calcMode=\"spline\"/>\n  <animate attributeName=\"fill\" keyTimes=\"0;0.5;1\" values=\"" + c3 + ";" + c4 + ";" + c3 + "\" dur=\"" + speed + "s\"\n  repeatCount=\"indefinite\" begin=\"" + -speed * (0.25 + i / c) + "s\"/>\n</circle>");
        }
        "";
        return svg.join("");
      },
      step: function(){}
    };
    if (module != null) {
      return module.exports = ret;
    }
  })(module);
  x$ = angular.module('loadingIO');
  x$.factory("lds-" + module.exports.id, ['$interval'].concat(function($interval){
    return module.exports;
  }));
  return x$;
})();